package org.fluentjdbc.oracle;

import oracle.jdbc.pool.OracleDataSource;
import org.fluentjdbc.DatabaseSaveResult;
import org.fluentjdbc.util.ExceptionUtil;
import org.junit.Assume;
import org.junit.Ignore;
import org.junit.Test;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;

public class OracleTests {

    private static final Map<String, String> REPLACEMENTS = new HashMap<>();
    static {
        REPLACEMENTS.put("UUID", "VARCHAR2(36)");
        REPLACEMENTS.put("INTEGER_PK", "NUMBER GENERATED by default on null as IDENTITY primary key");
        REPLACEMENTS.put("DATETIME", "timestamp");
        REPLACEMENTS.put("BOOLEAN", "NUMBER(1,0)");
    }

    public static class DatabaseSaveBuilderTest extends org.fluentjdbc.DatabaseSaveBuilderTest {
        public DatabaseSaveBuilderTest() throws SQLException {
            super(getConnection(), REPLACEMENTS);
        }

        @Override
        public void shouldUpdateRowOnKey() throws SQLException {
            // Oracle uses BigDecimal for integer columns which messes with the comparison
        }

        @Override
        public void shouldNotUpdateUnchangedRow() throws SQLException {
            // ORACLE IMPLEMENTS CUSTOM TIMESTAMP CLASS WHICH MESSES WITH COMPARISON
        }
    }

    public static class RichDomainModelTest extends org.fluentjdbc.RichDomainModelTest {
        public RichDomainModelTest() throws SQLException {
            super(getConnection(), REPLACEMENTS);
        }

        @Override
        @Ignore
        public void shouldGroupEntriesByTagTypes() {
            // Ignore - relies on ResultTypeMetadata.getTableName, which is not supported
        }

        @Override
        @Ignore
        public void shouldBulkInsert() {
            // Ignore - relies on the combination of addBatch and RETURN_GENERATED_KEYS
        }
    }

    public static class FluentJdbcDemonstrationTest extends org.fluentjdbc.FluentJdbcDemonstrationTest {
        public FluentJdbcDemonstrationTest() throws SQLException {
            super(getConnection(), REPLACEMENTS);
        }
    }

    public static class DatabaseTableTest extends org.fluentjdbc.DatabaseTableTest {
        public DatabaseTableTest() throws SQLException {
            super(getConnection(), REPLACEMENTS);
        }

        @Override
        public void shouldUpdateIfPresent() throws SQLException {
            // Unknown problem (ORA-01747: invalid user.table.column, table.colum or column specification)
        }
    }

    public static class BulkInsertTest extends org.fluentjdbc.BulkInsertTest {
        public BulkInsertTest() throws SQLException {
            super(getConnection(), REPLACEMENTS);
        }
    }

    @Ignore
    public static class DatabaseJoinedQueryBuilderTest extends org.fluentjdbc.DatabaseJoinedQueryBuilderTest {
        public DatabaseJoinedQueryBuilderTest() throws SQLException {
            super(getConnection(), REPLACEMENTS);
        }
    }

    @Ignore
    public static class DbContextJoinedQueryBuilderTest extends org.fluentjdbc.DbContextJoinedQueryBuilderTest {
        public DbContextJoinedQueryBuilderTest() throws SQLException {
            super(getDataSource(), REPLACEMENTS);
        }
    }

    public static class DbSyncBuilderContextTest extends org.fluentjdbc.DbSyncBuilderContextTest {
        public DbSyncBuilderContextTest() throws SQLException {
            super(getDataSource(), REPLACEMENTS);
        }

        @Override
        public void shouldUpdateBigDecimal() {
            // Oracle treats DECIMAL columns as integers, rounding values
        }
    }

    public static class UsageDemonstrationTest extends org.fluentjdbc.usage.context.UsageDemonstrationTest {
        public UsageDemonstrationTest() throws SQLException {
            super(getDataSource(), REPLACEMENTS);
        }

        @Override @Ignore @Test
        public void shouldJoinTables() {
        }

        @Override @Ignore @Test
        public void shouldPerformLeftJoin() {
        }

        @Override
        protected void verifySyncStatus(EnumMap<DatabaseSaveResult.SaveStatus, Integer> syncStatus) {
            // SQL Lite doesn't convert Timestamps correctly and so doesn't match the existing rows
        }
    }

    static Connection getConnection() throws SQLException {
        return getDataSource().getConnection();
    }

    private static boolean databaseFailed = false;

    static DataSource getDataSource() throws SQLException {
        Assume.assumeFalse(databaseFailed);
        OracleDataSource dataSource = new OracleDataSource();
        String username = System.getProperty("test.db.oracle.username", "fluentjdbc_test");
        dataSource.setURL(System.getProperty("test.db.postgres.url", "jdbc:oracle:thin:@localhost:1521:xe"));
        dataSource.setUser(username);
        dataSource.setPassword(System.getProperty("test.db.postgres.password", username));
        try {
            dataSource.getConnection().close();
        } catch (SQLException e) {
            if (e.getSQLState().equals("08006")) {
                databaseFailed = true;
                Assume.assumeFalse("Database is unavailable", databaseFailed);
            }
            throw ExceptionUtil.softenCheckedException(e);
        }
        return dataSource;
    }
}
